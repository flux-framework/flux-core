--[[--------------------------------------------------------------------------
 *  Copyright (c) 2014 Lawrence Livermore National Security, LLC.  Produced at
 *  the Lawrence Livermore National Laboratory (cf, AUTHORS, DISCLAIMER.LLNS).
 *  LLNL-CODE-658032 All rights reserved.
 *
 *  This file is part of the Flux resource manager framework.
 *  For details, see https://github.com/flux-framework.
 *
 *  This program is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the Free
 *  Software Foundation; either version 2 of the license, or (at your option)
 *  any later version.
 *
 *  Flux is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the IMPLIED WARRANTY OF MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE.  See the terms and conditions of the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 *  See also:  http://www.gnu.org/licenses/
 ---------------------------------------------------------------------------]]
--
--  Test harness configuration for build-tree:
--

local top_srcdir = "@abs_top_srcdir@"
local top_builddir = "@abs_top_builddir@"

--  Default path for flux(1) binary
local fluxbindir = top_builddir .. "/src/cmd"

if os.getenv ("FLUX_TEST_INSTALLED_PATH") then
    --
    --  We are attempting to test against an installed flux(1).
    --   Therefore, we grab proper LUA_PATH and LUA_CPATH by invoking
    --   lua(1) under flux-env. We then _append_ in-tree paths so
    --   that test dependencies can be picked up such as Test/More.lua
    --   and lalarm.so
    --
    --  Reset fluxbindir to requested path by env variable:
    fluxbindir = os.getenv ("FLUX_TEST_INSTALLED_PATH")
    local flux = fluxbindir .. "/flux"
    local read_path = function (v)
        local cmd = string.format (flux.." env lua -e 'print (package.%s)'", v)
        local p = io.popen (cmd):read ("*all")
        return p:match ("^%s*(.-);*%s*$")
    end
    package.path = read_path ("path") .. ';' ..
                     top_srcdir .. "/src/bindings/lua/?.lua"
    package.cpath = read_path ("cpath") .. ';' ..
                     top_builddir .. "/src/bindings/lua/.libs/?.so"
else
    --
    -- Testing in-tree, simply append explicit path to lua bindings to
    --  package.path and package.cpath to hand down to test scripts
    --
    package.path = top_srcdir .. "/src/bindings/lua/?.lua" .. ';'
	    .. package.path
    package.cpath = top_builddir .. "/src/bindings/lua/.libs/?.so" .. ';'
	    .. package.cpath
end

require 'Test.More'

return  {
    top_srcdir = top_srcdir,
    top_builddir = top_builddir,
    fluxbindir = fluxbindir
}

-- vi: ts=4 sw=4 expandtab
