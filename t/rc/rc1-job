#!/bin/bash -e

idset_from_count() {
    if test $1 -eq 1; then
        echo "0"
    else
        echo "0-$(($1 - 1))"
    fi
}

set_fake_resources() {
    cores=${1}
    ranklist=$(idset_from_count $(flux getattr size))
    corelist=$(idset_from_count ${cores})
    R=$(flux R encode -r${ranklist} -c${corelist})
    echo Setting fake resource.R="$R" >&2
    flux kvs put resource.R="$R"
}

RANK=$(flux getattr rank)

# Usage: modload {all|<rank>} modname [args ...]
modload() {
    local where=$1; shift
    if test "$where" = "all" || test $where -eq $RANK; then
        flux module load $*
    fi
}


modload all content
modload 0 content-sqlite
modload all kvs
modload all kvs-watch

modload 0 job-manager

modload all job-ingest
modload all job-info
modload 0 job-list
modload all barrier
modload 0 heartbeat

if test $RANK -eq 0; then
    # Set fake resources for testing
    set_fake_resources ${TEST_UNDER_FLUX_CORES_PER_RANK:-2}
fi
modload all resource noverify

if [ "${TEST_UNDER_FLUX_NO_JOB_EXEC}" != "y" ]
then
    modload 0 job-exec
fi

# mirror sched-simple default of limited=8
if [ "${TEST_UNDER_FLUX_SCHED_SIMPLE_MODE}x" != "x" ]
then
    mode=${TEST_UNDER_FLUX_SCHED_SIMPLE_MODE}
else
    mode="limited=8"
fi

modload 0 sched-simple mode=${mode}
#--setbit 0x2 enables creation of reason_pending field
if [ $RANK -eq 0 ]
then
    flux module debug --setbit 0x2 sched-simple
fi
