#!/usr/bin/env lua
--[[--------------------------------------------------------------------------
 *  Copyright (c) 2014 Lawrence Livermore National Security, LLC.  Produced at
 *  the Lawrence Livermore National Laboratory (cf, AUTHORS, DISCLAIMER.LLNS).
 *  LLNL-CODE-658032 All rights reserved.
 *
 *  This file is part of the Flux resource manager framework.
 *  For details, see https://github.com/flux-framework.
 *
 *  This program is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the Free
 *  Software Foundation; either version 2 of the license, or (at your option)
 *  any later version.
 *
 *  Flux is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the IMPLIED WARRANTY OF MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE.  See the terms and conditions of the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 *  See also:  http://www.gnu.org/licenses/
 ---------------------------------------------------------------------------]]
--
-- flux-wreck: simple wreck job utility
--
local f, err = require 'flux' .new()
local wreck = require 'wreck'
local hostlist = require 'flux.hostlist'
local posix = require 'flux.posix'
local prog = require 'flux.Subcommander'.create {
    usage = "COMMAND [OPTIONS]",
    handler = function (self, arg)
        self:log ("COMMAND required\n")
        self:help (1)
    end
}

local function printf (...)
    io.stdout:write (string.format (...))
end

local function check_jobid_arg (self, id)
    if not id then
        io.stderr:write ("Error: Job id required\n")
        self:help (1)
    elseif not tonumber (id) then
        self:die ("Invalid Job id '%s'\n", id)
    end
    return id
end


local function kvs_path (id, fmt, ...)
    local p = assert (wreck.id_to_path { flux = f, jobid = id })
    if fmt then
        p = p .. "." .. string.format (fmt, ...)
    end
    return p
end


prog:SubCommand {
 name = "attach",
 description = "Attach to running or completed job output",
 usage = "[OPTIONS] JOBID",
 options = {
     { name = "status",  char = "s",
       usage = "Include status after all output" },
     { name = "label-io",  char = "l",
       usage = "Label lines of output with task id" },
 },
 handler = function (self, arg)
    local id = check_jobid_arg (self, arg[1])
    local state = f:kvs_get (kvs_path (id, "state"))
    local taskio, err = wreck.ioattach {
        flux = f,
        jobid = id,
        labelio = self.opt.l,
        on_completion = function ()
            f:reactor_stop()
        end
    }
    if not taskio then
        self:die ("Failed to connect to job %d: %s\n", id, err)
    end
    if state ~= "complete" and state ~= "reaped" then
        local kz, err = f:kz_open (kvs_path (id, "input.files.stdin"), "w")
        if kz then
            local iow, err = f:iowatcher {
                fd = posix.fileno (io.input()),
                handler = function (iow, r)
                    if r.data then kz:write (r.data) end
                    if r.eof  then kz:close () end
                end
            }
            if not iow then self:die ("error opening stdin: %s\n", err) end
        end
    end
    if not taskio:complete() then f:reactor () end
    if self.opt.s then
        self.parent:run {"status", id}
    end
    os.exit (0)
 end
}

local function opt_sig (s)
    if not s then return posix.SIGTERM end
    if tonumber (s) then return tonumber (s) end
    if not tonumber (posix[s]) then
        prog:die ("Invalid signal '%s'\n", s)
    end
    return tonumber (posix [s])
end

prog:SubCommand {
 name = "cancel",
 description = "Cancel a pending job",
 usage = "[-f|--force] JOBID",
 options = {
    { name = "force", char = "f",
      usage = "Force cancel even if scheduler is not loaded"
    },
 },
 handler = function (self, arg)
    local id = check_jobid_arg (self, arg[1])
    local resp, err = f:rpc ("sched.cancel", { jobid = tonumber (id) })
    if not resp then
        if err == "Function not implemented" and not self.opt.f then
            prog:die ("job cancel not supported when scheduler not loaded")
        elseif self.opt.f or err == "Invalid argument" then
            prog:log ("Sending SIGKILL to %d\n", id)
            local rc, err = f:sendevent ({signal = 9}, "wreck.%d.kill", id)
            if not rc then self:die ("signal: %s\n", err) end
        else
            prog:die ("Unable to cancel %d: %s\n", id, err)
        end
    end
 end
}

prog:SubCommand {
 name = "kill",
 description = "Kill a running job",
 usage = "[OPTIONS] JOBID",
 options = {
     { name = "signal",  char = "s", arg = "N",
       usage = "Specify signal number N to be sent." }
 },
 handler = function (self, arg)
    local id = check_jobid_arg (self, arg[1])
    local lwj, err = f:kvsdir (kvs_path (id))
    if not lwj then self:die ("Job %d: %s\n", id, err) end
    if lwj.state ~= "running" then
        io.stderr:write ("Job "..id..": "..lwj.state.."\n")
        os.exit (1)
    end
    local sig = opt_sig (self.opt.s)
    local rc, err = f:sendevent ({signal = sig}, "wreck.%d.kill", id)
    if not rc then self:die ("signal: %s\n", err) end
 end
}

prog:SubCommand {
 name = "status",
 description = "Return status of jobs",
 usage = "JOBID",
 handler = function (self, arg)
    local jobid = check_jobid_arg (self, arg[1])
    local lwj, err = f:kvsdir (kvs_path (jobid))
    if not lwj then self:die ("Job %d: %s\n", jobid, err) end
    print ("Job "..jobid.." status: "..lwj.state)
    local code, msglist = wreck.status { flux = f, jobid = jobid }
    if not code then self:die (msglist) end
    for msg, hl in pairs (msglist) do
        local s = string.format ("task%s: %s", tostring (hl:sort()), msg)
        print (s)
    end
    os.exit (code)
 end
}


local LWJ = {}
function LWJ.open (f, id, kvspath)
    if not f or not id then
        return nil, "Required arg missing"
    end
    if not kvspath then
        kvspath = kvs_path (id)
    end
    local lwj, err = f:kvsdir (kvspath)
    if not lwj then
        return nil, "Failed to get lwj info: "..err
    end
    return setmetatable ({id = id, lwj = lwj }, LWJ)
end

local function gettimeofday_as_table ()
    local ts, us = require 'flux.posix'.gettimeofday ()
    if not ts then return nil, us end
    if type (ts) == "table" then return ts end
    return { sec = ts, usec = us }
end

local function now ()
    local t, err = gettimeofday_as_table ()
    if not t then error ("gettimeofday: "..err) end
    return t.sec + (t.usec / (1000 * 1000))
end

function LWJ:timediff (tstart, tend, talt)
    local t0 = self.lwj[tstart.."-time"]
    if not t0 then return 0 end
    local t1 = self.lwj[tend.."-time"]
    if not t1 then t1 = self.lwj[talt.."-time"] end
    if not t1 then t1 = now () end
    local s = t1 - t0
    return s > 0 and s or 0
end

function LWJ:exit_string ()
    local flux = require 'flux'
    local state = self.state
    local max = self.lwj.exit_status.max
    if max then
        local s, code, core = flux.exitstatus (max)
        state = s
        if s == "exited" and code > 0 then
            state = "failed"
        end
    end
    return state
end

function LWJ:state_string ()
    if self.state == "complete" then
        return self:exit_string ()
    end
    return self.state
end

function LWJ:ranks ()
    local hl = hostlist.new()
    local R = self.lwj.R_lite
    if not R then
        local rank = self.lwj.rank
        if not rank then return nil end
        for i in rank:keys() do hl:concat (i) end
    else
        for _,entry in ipairs (R) do
            hl:concat (entry.rank)
        end
    end
    return hl:sort()
end

LWJ.__index = function (self, key)
    if key == "state" then
        if not self._state then
            self._state = self.lwj.state
        end
        return self._state
    elseif key == "ntasks" then
        return self.lwj.ntasks
    elseif key == "nnodes" then
        return self.lwj.nnodes
    elseif key == "runtime" then
        return self:timediff ("starting", "complete", "failed")
    elseif key == "t0" then
        return self:timediff ("create", "starting", "failed")
    elseif key == "t1" then
        return self:timediff ("starting", "running", "failed")
    elseif key == "t2" then
        return self:timediff ("running", "complete", "failed")
    elseif key == "start" then
        return os.date ("%FT%T", self.lwj["starting-time"])
    elseif key == "end" then
        return os.date ("%FT%T", self.lwj["complete-time"])
    elseif key == "created" then
        return os.date ("%FT%T", self.lwj["create-time"])
    elseif key == "command" then
        return self.lwj.cmdline[1]
    end
    return LWJ [key]
end

local function seconds_to_string (s)
    local f = string.format
    if s > (60*60*24) then
        return f ("%.03fd", s / (60*60*24))
    elseif s > (60*60) then
        return f ("%.03fh", s / (60*60))
    elseif s > 60 then
        return f ("%.03fm", s / 60)
    end
    return f ("%.03fs", s)
end

local function bracketify (args)
    local r = {}
    for _,v in ipairs (args) do
        table.insert (r, "[" .. v .. "]")
    end
    return (r)
end

local function joblist_from_args (self, args)
    local max = tonumber (self.opt.n) or 25
    if #args == 0 then
        return wreck.joblist{ flux = f, max = max }
    end
    -- otherwise use dirs on cmdline
    local hl,err = hostlist.union (unpack (bracketify (args)))
    if not hl then return nil, err end
    return wreck.jobids_to_kvspath { flux = f, jobids = hl:expand() }
end

prog:SubCommand {
 name = "ls",
 usage = "[OPTIONS] [JOBIDs]",
 options = {
  { name = "max", char = 'n', arg="COUNT",
    usage = "Display at most COUNT jobs",
  }
 },
 description = "List jobs in kvs",
 handler = function (self, arg)
    local dirs,err = joblist_from_args (self, arg)
    if not dirs then self:die (err) end
    if #dirs == 0 then return end
    local fmt = "%6s %6s %-9s %20s %12s %8s %-.13s\n";
    printf (fmt, "ID", "NTASKS", "STATE", "START", "RUNTIME", "RANKS", "COMMAND")
    for _,dir in pairs (dirs) do
        local id = dir:match ("(%d+)$")
        if tonumber (id) then
            local j, err = LWJ.open (f, id, dir)
            if not j then self:die ("job%d: %s", id, err) end
            printf (fmt, id, j.ntasks, j:state_string(), j.start,
                    seconds_to_string (j.runtime),
                    tostring (j:ranks()),
                    j.command:match ("([^/]+)$"))
        end
    end
 end
}

prog:SubCommand {
 name = "timing",
 usage = "[OPTIONS] [JOBIDs]...",
 options = {
  { name = "max", char = 'n', arg="COUNT",
    usage = "Display at most COUNT jobs",
  }
 },
 description = "List timings of jobs in kvs",
 handler = function (self, arg) 
    local dirs,err = joblist_from_args (self, arg)
    if not dirs then self:die (err) end
    if #dirs == 0 then return end
    local fmt = "%6s %12s %12s %12s %12s %12s\n"
    printf (fmt, "ID", "NTASKS", "STARTING", "RUNNING", "COMPLETE", "TOTAL")
    for _,dir in pairs (dirs) do
        local id = dir:match ("(%d+)$")
        if tonumber (id) then
            local j, err = LWJ.open (f, id, dir)
            if not j then self:die ("job%d: %s", id, err) end
            printf (fmt, id,
                    j.ntasks,
                    seconds_to_string (j.t0),
                    seconds_to_string (j.t1),
                    seconds_to_string (j.t2),
                    seconds_to_string (j.runtime))
        end
    end
 end
}

prog:SubCommand {
 name = "kvs-path",
 usage = "JOBID",
 description = "Display path in KVS to job ID",
 handler = function (self, arg)
    if not arg[1] then self:die ("Job ID argument required\n") end
    print (kvs_path (arg[1]))
 end
}

prog:SubCommand {
 name = "last-jobid",
 description = "Display the last jobid in lwj id sequence",
 usage = "[OPTIONS]",
 options = {
  { name = "kvs-path", char = 'p',
    usage = "Return path to job in kvs instead of jobid",
  }
 },
 handler = function (self, arg)
    local req = {
       name = "lwj",
       preincrement = 0,
       postincrement = 0,
       create = false
    }
    local resp, err = f:rpc ("seq.fetch", req)
    if not resp then
        self:die ("No last jobid found: %s", err)
    end
    local result = resp.value
    if self.opt.p then
        result = kvs_path (result)
    end
    print (result)
 end
}

prog:SubCommand {
 name = "setenv",
 usage = "[VAR=VALUE|all]",
 description = "Export environment to all jobs",
 handler = function (self, arg)
    local f = assert (require 'flux'.new ())
    local getenv = wreck.get_filtered_env
    local env = f:kvs_get ("lwj.environ") or {}
    for _,expr in ipairs (arg) do
        if expr == "all" then
            for k,v in pairs(getenv()) do
                env[k] = v
            end
        else
            local var,val = expr:match("(.*)=(.*)")
            env[var] = val
        end
    end
    f:kvs_put ("lwj.environ", env)
    f:kvs_commit ()
 end
}

prog:SubCommand {
 name = "unsetenv",
 usage = "VAR [VAR...]",
 description = "Export environment to all jobs",
 handler = function (self, arg)
    local f = assert (require 'flux'.new ())
    local env = f:kvs_get ("lwj.environ") or {}
    for _,var in ipairs (arg) do
        env[var] = nil
    end
    f:kvs_put ("lwj.environ", env)
    f:kvs_commit ()
 end
}

prog:SubCommand {
 name = "getenv",
 usage = "VAR [VAR...]",
 description = "Export environment to all jobs",
 handler = function (self, arg)
    local f = assert (require 'flux'.new ())
    local env = f:kvs_get ("lwj.environ") or {}
    if #arg == 0 then
        for k,v in pairs (env) do
            print (k.."="..v)
        end
    end
    for _,k in ipairs (arg) do
        local v = env[k] or ""
        print (k.."="..v)
    end
 end
}




-- return keys in dir as a table sorted by number
local function sorted_keys (dir)
    local results = {}
    for k in dir:keys () do
        table.insert (results, k)
    end
    table.sort (results, function (a,b) return tonumber (a) < tonumber (b) end)
    return results
end

local function remove_if_empty (key, r)
   local results = r or {}
   local dir  = f:kvsdir (key)
   if not dir or dir.state then return false, results end
   local remove = true
   for k in dir:keys () do
       remove, results = remove_if_empty (key .. "." .. k, results)
   end
   if remove then
       f:kvs_unlink (key)
       table.insert (results, key)
   end
   return remove, results
end

prog:SubCommand {
 name = "purge",
 usage = "[OPTIONS]",
 options = {
  { name = "verbose",  char = "v",
    usage = "Increase verbosity." },
  { name = "target-size", char = 't', arg = "N",
    usage = "Specify a target number of lwj entries to keep"
  },
  { name = "remove",  char = "R",
    usage = "Remove all eligible lwj entries." },
  { name = "max",  char = "m", arg = "N",
    usage = "Maximum number of entries to target." },
  { name = "keep", char = "k", arg = "CODE",
    usage = "Keep entries where CODE is true" },
 },
 description = "Purge old jobs entries from kvs",
 handler = function (self, arg)
    local tt = require 'flux.timer'. new()
    local verbose = self.opt.v

    ---
    -- Gather LWJ path list
    --
    local dirs = wreck.joblist{ flux = f } or {}
    if verbose then
        self:log ("%4.03fs: got lwj list (%d entries)\n", tt:get0(), #dirs)
    end

    local total = #dirs
    local target = tonumber (self.opt.t)
    local max = tonumber (self.opt.m) or math.huge
    local keep = function (id) return false end
    if self.opt.k then
        local err
        keep, err =
            loadstring ('local id = tonumber (...); return '..self.opt.k)
        if not keep then
            self:die ("Failed to compile --keep option: %s\n", err)
        end
    end

    -- Without --target-size option, just list current number of lwj entries
    if not target then
        self:log ("%d total job entries\n", total)
    elseif total <= target then
        -- If current total is less than target, then log and exit
        self:log ("%d total jobs at or below target size of %d\n",
                  total, target)
    else
        -- Otherwise, we need to purge some entries:
        --
        local n = math.min (total - target, max)

        -- Remove the first n ids using lwj-completed directory
        local r = {}
        (function() -- anonymous function used for early return
            local completed = f:kvsdir ("lwj-complete")
            for _,hb in ipairs (sorted_keys (completed)) do
                local hb_unlink = true
                local d = completed [hb]
                for _,id in ipairs (sorted_keys (d)) do
                    -- Save name of this kvs path:
                    local complink = tostring (d).."."..id
                    if keep (id) then
                        hb_unlink = false
                    else
                        table.insert (r, id)
                        if self.opt.R then
                            local t, target = f:kvs_type (complink)
                            if t == "symlink" then
                                f:kvs_unlink (target)
                            end
                            f:kvs_unlink (complink)
                        end
                        n = n - 1
                        if n == 0 then return end
                    end
                end
                --
                -- Finished iterating all entries in this hb subdir,
                --  should be ok to remove the hb dir now:
                if self.opt.R and hb_unlink then
                    f:kvs_unlink ("lwj-complete."..hb)
                end
            end
        end)()

        -- gather ids to remove in hostlist for condensed output:
        --
        local hl = require 'flux.hostlist' .new (table.concat (r, ",")):uniq ()
        local rmdirs = {}
        if self.opt.R then
            f:kvs_commit()
            if verbose then
                self:log ("%4.03fs: unlinked %d entries\n", tt:get0(), #hl)
            end
            _, rmdirs = remove_if_empty ("lwj")
            f:kvs_commit ()
        elseif verbose then
            self:log ("%4.03fs: finished walking %d entries in lwj-complete\n",
                      tt:get0(), #hl)
        end

        local idstring = ""
        if #hl > 0 then
            idstring = ": "..tostring (hl):match ("%[?([^]]+)%]?")
        end
        self:log ("%s %d lwj entries%s\n",
                  self.opt.R and "removed" or "would remove", #hl,
                  idstring)
        if #rmdirs > 0 then
            self:log ("removed %d empty dirs under lwj.\n", #rmdirs)
            if verbose then
                self:log ("removed: %s\n", table.concat (rmdirs, ", "))
            end
        end
        if verbose then
            self:log ("%4.03fs: all done.\n", tt:get0());
        end
    end
 end
}


-- Check for valid connection to flux:
if not f then prog:die ("Connecting to flux failed: %s\n", err) end

-- Process cmdline, run any subcommand, or exit with failure:
prog:run (arg)
--  vi: ts=4 sw=4 expandtab
