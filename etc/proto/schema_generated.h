// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_FLUX_FRAMEWORK_H_
#define FLATBUFFERS_GENERATED_SCHEMA_FLUX_FRAMEWORK_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 10 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace Flux {
namespace Framework {

struct Message;
struct MessageBuilder;

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOPIC = 4,
    VT_PAYLOAD = 6,
    VT_NODEID = 8,
    VT_FLAGS = 10
  };
  const flatbuffers::String *topic() const {
    return GetPointer<const flatbuffers::String *>(VT_TOPIC);
  }
  const flatbuffers::String *payload() const {
    return GetPointer<const flatbuffers::String *>(VT_PAYLOAD);
  }
  int16_t nodeid() const {
    return GetField<int16_t>(VT_NODEID, 0);
  }
  int16_t flags() const {
    return GetField<int16_t>(VT_FLAGS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TOPIC) &&
           verifier.VerifyString(topic()) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           verifier.VerifyString(payload()) &&
           VerifyField<int16_t>(verifier, VT_NODEID, 2) &&
           VerifyField<int16_t>(verifier, VT_FLAGS, 2) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  typedef Message Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_topic(flatbuffers::Offset<flatbuffers::String> topic) {
    fbb_.AddOffset(Message::VT_TOPIC, topic);
  }
  void add_payload(flatbuffers::Offset<flatbuffers::String> payload) {
    fbb_.AddOffset(Message::VT_PAYLOAD, payload);
  }
  void add_nodeid(int16_t nodeid) {
    fbb_.AddElement<int16_t>(Message::VT_NODEID, nodeid, 0);
  }
  void add_flags(int16_t flags) {
    fbb_.AddElement<int16_t>(Message::VT_FLAGS, flags, 0);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> topic = 0,
    flatbuffers::Offset<flatbuffers::String> payload = 0,
    int16_t nodeid = 0,
    int16_t flags = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_topic(topic);
  builder_.add_flags(flags);
  builder_.add_nodeid(nodeid);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message> CreateMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *topic = nullptr,
    const char *payload = nullptr,
    int16_t nodeid = 0,
    int16_t flags = 0) {
  auto topic__ = topic ? _fbb.CreateString(topic) : 0;
  auto payload__ = payload ? _fbb.CreateString(payload) : 0;
  return Flux::Framework::CreateMessage(
      _fbb,
      topic__,
      payload__,
      nodeid,
      flags);
}

inline const Flux::Framework::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<Flux::Framework::Message>(buf);
}

inline const Flux::Framework::Message *GetSizePrefixedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Flux::Framework::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Flux::Framework::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Flux::Framework::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Flux::Framework::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Flux::Framework::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Framework
}  // namespace Flux

#endif  // FLATBUFFERS_GENERATED_SCHEMA_FLUX_FRAMEWORK_H_
